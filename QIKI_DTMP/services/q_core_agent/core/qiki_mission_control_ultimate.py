#!/usr/bin/env python3
"""
QIKI Mission Control Ultimate - –í–µ—Ä—Å–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç prompt_toolkit —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
–†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º Unix/Linux —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –≤–∫–ª—é—á–∞—è Termux.
"""

import sys
import os
import asyncio
import time
import threading
import math
import random
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional

# Add current directory to path for imports
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

# Robust prompt_toolkit import with graceful fallback
try:
    from prompt_toolkit import Application
    from prompt_toolkit.layout import Layout, HSplit, VSplit, Window
    from prompt_toolkit.layout.controls import FormattedTextControl
    from prompt_toolkit.widgets import Frame, TextArea
    from prompt_toolkit.key_binding import KeyBindings
    from prompt_toolkit.styles import Style
    from prompt_toolkit.formatted_text import FormattedText
    from prompt_toolkit.application import get_app
    PROMPT_TOOLKIT_AVAILABLE = True
    print("‚úÖ prompt_toolkit loaded successfully")
except ImportError as e:
    print(f"‚ùå prompt_toolkit not available: {e}", file=sys.stderr)
    print(
        "‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç –≤—Ä—É—á–Ω—É—é: pip install prompt_toolkit",
        file=sys.stderr,
    )
    PROMPT_TOOLKIT_AVAILABLE = False
    sys.exit(1)

from ship_core import ShipCore
from ship_actuators import ShipActuatorController, ThrusterAxis, PropulsionMode
from test_ship_fsm import ShipLogicController, ShipState


class QIKIMissionControlUltimate:
    """
    Ultimate Mission Control Terminal —Å prompt_toolkit.
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∂–∏–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –∞–ø–ø–∞—Ä–∞—Ç–æ–º.
    """
    
    def __init__(self):
        print("üöÄ Initializing QIKI Mission Control Ultimate...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∞–±–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        q_core_agent_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
        self.ship_core = ShipCore(base_path=q_core_agent_root)
        self.actuator_controller = ShipActuatorController(self.ship_core)
        self.logic_controller = ShipLogicController(self.ship_core, self.actuator_controller)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º autopilot_enabled
        self.autopilot_enabled = False
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ Mission Control
        self.mission_start_time = time.time()
        self.running = True
        self.language = "RU"  # RU –∏–ª–∏ EN
        self.current_view = "MAIN"  # MAIN, SENSORS, POWER, DIAG
        
        # –ñ–∏–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∏—Å—Å–∏–∏
        self.mission_data = {
            'designator': '–†–ê–ó–í–ï–î–ö–ê-7–î / RECON-7D',
            'objective': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ J7 / Investigate Anomaly J7',
            'progress': 0.0,
            'eta_seconds': 11520,  # 3 —á–∞—Å–∞ 12 –º–∏–Ω—É—Ç
            'steps': [
                {'name': '–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–µ–∫—Ç–æ—Ä—É / Navigate to sector', 'done': True},
                {'name': '–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ / Spectral scan', 'done': True},
                {'name': '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ / Anomaly detection', 'done': True},
                {'name': '–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ J7 / Approach J7', 'done': False},
                {'name': '–°–±–æ—Ä –æ–±—Ä–∞–∑—Ü–æ–≤ / Sample collection', 'done': False},
                {'name': '–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö / Data transmission', 'done': False},
                {'name': '–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –±–∞–∑—É / Return to base', 'done': False}
            ]
        }
        
        self.event_log = []
        self.command_input = ""
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
        self.simulation_time = 0
        self.last_update = time.time()
        self.fuel_consumption_rate = 0.1  # –∫–≥/—á–∞—Å
        self.power_fluctuation = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∂–∏–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–∞–∑—É
        self.live_telemetry = {
            'hull_integrity': 100.0,
            'reactor_output': 35.0,
            'reactor_max': 50.0,
            'battery_charge': 10.5,
            'battery_capacity': 12.0,
            'reactor_temp': 2800.0,
            'main_drive_fuel': 450.0,
            'oxygen_level': 21.0,
            'co2_level': 400.0,
            'pressure': 101.3,
            'qiki_status': 'active',
            'qiki_temp': 295.0,
            'active_sensors': 2,
            'propulsion_mode': 'IDLE',
            'ship_state': 'SHIP_STARTUP',
            'nav_x': 324167.89,
            'nav_y': -52631.44,
            'nav_z': 125.61,
            'velocity_abs': 2437.0,
            'velocity_rel': 18.0,
            'anomaly_distance': 32.17,
            'deep_scan_progress': 0.0,
            'comm_signal_strength': 80.0,
            'comm_quality': 80.0,
            'solar_efficiency': 100.0,
            'thruster_efficiency': [98.0, 98.0, 98.0, 98.0],
            'sensor_power': 1.2,
        }
        
        # –§–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        self.background_thread = threading.Thread(target=self._background_simulation, daemon=True)
        self.background_thread.start()
        
        self.log("–°–ò–°–¢–ï–ú–ê / SYSTEM", "‚úÖ QIKI Mission Control Ultimate –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω / initialized")
        self.log("–ö–û–†–ê–ë–õ–¨ / SPACECRAFT", f"üõ∞Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ / Connected to {self.ship_core.get_id()}")
        
        print(f"‚úÖ Connected to spacecraft: {self.ship_core.get_id()}")
        print("üéØ Mission Control Ultimate ready!")
    
    def log(self, system: str, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∂—É—Ä–Ω–∞–ª."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        mission_time = self._get_mission_time()
        self.event_log.append({
            'time': timestamp,
            'mission_time': mission_time,
            'system': system,
            'message': message
        })
        if len(self.event_log) > 20:
            self.event_log = self.event_log[-20:]
    
    def _get_mission_time(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –º–∏—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ T+HH:MM:SS."""
        elapsed = int(time.time() - self.mission_start_time)
        hours = elapsed // 3600
        minutes = (elapsed % 3600) // 60
        seconds = elapsed % 60
        return f"T+{hours:02d}:{minutes:02d}:{seconds:02d}"
    
    def _background_simulation(self):
        """–§–æ–Ω–æ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∂–∏–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        while self.running:
            try:
                current_time = time.time()
                dt = current_time - self.last_update
                self.simulation_time += dt
                self.last_update = current_time
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                self._update_live_telemetry(dt)
                
                # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
                if random.random() < 0.02:  # 2% —à–∞–Ω—Å —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    self._generate_random_event()
                
                # –ê–≤—Ç–æ–ø–∏–ª–æ—Ç
                if hasattr(self, 'autopilot_enabled') and self.autopilot_enabled:
                    result = self.logic_controller.process_logic_cycle()
                    if result.get('state_changed'):
                        self.log("–ê–í–¢–û–ü–ò–õ–û–¢ / AUTOPILOT", f"ü§ñ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {result['current_state']}")
                
                time.sleep(2)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                self.log("–°–ò–°–¢–ï–ú–ê / SYSTEM", f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ / Simulation error: {e}")
                time.sleep(5)
    
    def _update_live_telemetry(self, dt: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∂–∏–≤—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª—è
            hull = self.ship_core.get_hull_status()
            power = self.ship_core.get_power_status()
            propulsion = self.ship_core.get_propulsion_status()
            sensors = self.ship_core.get_sensor_status()
            life_support = self.ship_core.get_life_support_status()
            computing = self.ship_core.get_computing_status()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤—ã–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏
            self.power_fluctuation = 0.5 * math.sin(self.simulation_time * 0.1) + random.uniform(-0.3, 0.3)
            
            # –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
            fuel_rate = self.fuel_consumption_rate
            if self.actuator_controller.current_mode == PropulsionMode.CRUISE:
                fuel_rate *= 3.0
            elif self.actuator_controller.current_mode == PropulsionMode.MANEUVERING:
                fuel_rate *= 1.5
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø–ª–∏–≤–æ (—Å–∏–º—É–ª—è—Ü–∏—è)
            current_fuel = propulsion.main_drive_fuel_kg
            new_fuel = max(0, current_fuel - fuel_rate * dt / 3600)  # dt –≤ —á–∞—Å–∞—Ö
            
            self.live_telemetry = {
                # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∂–∏–≤—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
                'hull_integrity': hull.integrity,
                'reactor_output': power.reactor_output_mw + self.power_fluctuation,
                'reactor_max': power.reactor_max_output_mw,
                'battery_charge': power.battery_charge_mwh,
                'battery_capacity': power.battery_capacity_mwh,
                'reactor_temp': power.reactor_temperature_k + random.uniform(-5, 5),
                'main_drive_fuel': new_fuel,
                'oxygen_level': life_support.atmosphere.get('oxygen_percent', 0) + random.uniform(-0.1, 0.1),
                'co2_level': life_support.atmosphere.get('co2_ppm', 0) + random.uniform(-5, 10),
                'pressure': life_support.atmosphere.get('pressure_kpa', 0) + random.uniform(-0.5, 0.5),
                'qiki_status': computing.qiki_core_status,
                'qiki_temp': computing.qiki_temperature_k + random.uniform(-2, 2),
                'active_sensors': len(sensors.active_sensors),
                'propulsion_mode': self.actuator_controller.current_mode.value,
                'ship_state': self.logic_controller.current_state.value,
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∏–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞–Ω–µ–ª–µ–π
                'nav_x': 324167.89 + random.uniform(-10, 10),
                'nav_y': -52631.44 + random.uniform(-10, 10),
                'nav_z': 125.61 + random.uniform(-1, 1),
                'velocity_abs': 2437 + random.uniform(-5, 5),
                'velocity_rel': 18 + random.uniform(-2, 2),
                'anomaly_distance': max(0.5, 32.17 - (self.simulation_time * 0.01)),  # –ü—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è
                'deep_scan_progress': min(100, (self.simulation_time * 0.8) % 100),
                'comm_signal_strength': 80 + random.uniform(-5, 5),
                'comm_quality': 80 + random.uniform(-3, 3),
                'solar_efficiency': 100 if random.random() > 0.1 else 95,  # –ò–Ω–æ–≥–¥–∞ –ø—ã–ª—å
                'thruster_efficiency': [98 + random.uniform(-2, 2) for _ in range(4)],
                'sensor_power': 1.2 + random.uniform(-0.1, 0.1),
            }
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏—Å—Å–∏–∏
            if self.mission_data['progress'] < 100:
                self.mission_data['progress'] += dt * 0.5  # 0.5% –≤ —Å–µ–∫—É–Ω–¥—É
                self.mission_data['eta_seconds'] = max(0, self.mission_data['eta_seconds'] - dt)
            
        except Exception as e:
            self.log("–¢–ï–õ–ï–ú–ï–¢–†–ò–Ø / TELEMETRY", f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è / Update error: {e}")
    
    def _generate_random_event(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞."""
        events_ru_en = [
            ("–°–ï–ù–°–û–†–´ / SENSORS", "üì° –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∏–∫—Ä–æ-–º—É—Å–æ—Ä / Micro-debris detected"),
            ("–ü–ò–¢–ê–ù–ò–ï / POWER", "‚ö° –§–ª—É–∫—Ç—É–∞—Ü–∏—è —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π / Solar panel fluctuation"),
            ("–ù–ê–í–ò–ì–ê–¶–ò–Ø / NAV", "üß≠ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫—É—Ä—Å–∞ / Course correction"),
            ("–°–í–Ø–ó–¨ / COMM", "üìª –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã / Frequency switch"),
            ("–î–ò–ê–ì–ù–û–°–¢. / DIAG", "üîß –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º / System self-check"),
            ("–î–í–ò–ì–ê–¢–ï–õ–ò / PROP", "üöÄ –ú–∏–∫—Ä–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ / Orientation microcorrection"),
        ]
        
        system, message = random.choice(events_ru_en) 
        self.log(system, message)
    
    def _format_bar(self, value: float, max_val: float = 100, width: int = 10) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
        pct = min(100, max(0, (value / max_val) * 100))
        filled = int(pct * width / 100)
        return "‚ñà" * filled + "‚ñë" * (width - filled)
    
    def _create_header_window(self) -> Window:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —è–∑—ã–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏."""
        mission_time = self._get_mission_time()
        current_time = datetime.now().strftime("%H:%M:%S UTC")
        
        if self.language == "RU":
            title = "üöÄ –ö–ò–ö–ò –¶–ï–ù–¢–† –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–ï–¢–û–ú ULTIMATE"
            lang_hint = "[F12] Switch to English"
        else:
            title = "üöÄ QIKI MISSION CONTROL CENTER ULTIMATE"
            lang_hint = "[F12] –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –†—É—Å—Å–∫–∏–π"
        
        header_text = FormattedText([
            ("class:header", "‚ïî" + "‚ïê" * 98 + "‚ïó\\n"),
            ("class:header", "‚ïë"),
            ("class:title", f"{title:^98}"),
            ("class:header", "‚ïë\\n"),
            ("class:header", "‚ïë "),
            ("class:spacecraft", f"üõ∞Ô∏è {self.ship_core.get_id():<30}"),
            ("class:mission_time", f"{mission_time:>15}"),
            ("class:time", f"{current_time:>15}"),
            ("class:lang", f"{lang_hint:>30}"),
            ("class:header", " ‚ïë\\n"),
            ("class:header", "‚ïö" + "‚ïê" * 98 + "‚ïù"),
        ])
        
        return Window(FormattedTextControl(header_text), height=4)
    
    def _create_main_content_window(self) -> Window:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è
        hull_int = self.live_telemetry.get('hull_integrity', 100)
        reactor_out = self.live_telemetry.get('reactor_output', 35)
        reactor_max = self.live_telemetry.get('reactor_max', 50)
        battery_charge = self.live_telemetry.get('battery_charge', 10.5)
        battery_cap = self.live_telemetry.get('battery_capacity', 12)
        reactor_temp = self.live_telemetry.get('reactor_temp', 2800)
        oxygen = self.live_telemetry.get('oxygen_level', 21.0)
        co2 = self.live_telemetry.get('co2_level', 400)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_x = self.live_telemetry.get('nav_x', 324167.89)
        nav_y = self.live_telemetry.get('nav_y', -52631.44)
        nav_z = self.live_telemetry.get('nav_z', 125.61)
        vel_abs = self.live_telemetry.get('velocity_abs', 2437)
        vel_rel = self.live_telemetry.get('velocity_rel', 18)
        anomaly_dist = self.live_telemetry.get('anomaly_distance', 32.17)
        
        # –ú–∏—Å—Å–∏—è
        progress = self.mission_data['progress']
        eta_hours = int(self.mission_data['eta_seconds'] // 3600)
        eta_mins = int((self.mission_data['eta_seconds'] % 3600) // 60)
        
        reactor_pct = (reactor_out / reactor_max) * 100
        battery_pct = (battery_charge / battery_cap) * 100
        
        if self.language == "RU":
            system_title = "–°–ò–°–¢–ï–ú–´ / SYSTEMS"
            nav_title = "–ù–ê–í–ò–ì–ê–¶–ò–Ø / NAVIGATION"
            mission_title = "–ú–ò–°–°–ò–Ø / MISSION"
            coords_label = "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
            velocity_label = "–°–∫–æ—Ä–æ—Å—Ç—å"
            progress_label = "–ü—Ä–æ–≥—Ä–µ—Å—Å"
            etc_label = f"ETC: {eta_hours:02}—á {eta_mins:02}–º"
        else:
            system_title = "SYSTEMS / –°–ò–°–¢–ï–ú–´"
            nav_title = "NAVIGATION / –ù–ê–í–ò–ì–ê–¶–ò–Ø"
            mission_title = "MISSION / –ú–ò–°–°–ò–Ø"
            coords_label = "Coordinates"
            velocity_label = "Velocity"
            progress_label = "Progress"
            etc_label = f"ETC: {eta_hours:02}h {eta_mins:02}m"
        
        content_text = FormattedText([
            # –°–∏—Å—Ç–µ–º—ã
            ("class:panel_title", f"‚îå‚îÄ {system_title} " + "‚îÄ" * 30 + "‚îê\\n"),
            ("class:panel", "‚îÇ "),
            ("class:label", "üõ°Ô∏è  –ö–û–†–ü–£–° / HULL    : "),
            ("ansigreen" if hull_int > 80 else "ansiyellow" if hull_int > 50 else "ansired",
             f"[{self._format_bar(hull_int)}] {hull_int:5.1f}%"),
            ("class:panel", " ‚îÇ\\n"),
            
            ("class:panel", "‚îÇ "),
            ("class:label", "‚ö° –†–ï–ê–ö–¢–û–† / REACTOR : "),
            ("ansigreen" if reactor_pct > 50 else "ansiyellow",
             f"[{self._format_bar(reactor_pct)}] {reactor_pct:5.1f}%"),
            ("class:panel", " ‚îÇ\\n"),
            
            ("class:panel", "‚îÇ "),
            ("class:label", "üîã –ë–ê–¢–ê–†–ï–Ø / BATTERY : "),
            ("ansigreen" if battery_pct > 50 else "ansiyellow" if battery_pct > 20 else "ansired",
             f"[{self._format_bar(battery_pct)}] {battery_pct:5.1f}%"),
            ("class:panel", " ‚îÇ\\n"),
            
            ("class:panel", "‚îÇ "),
            ("class:label", "üå°Ô∏è  –¢–ï–ú–ü.–†–ï–ê–ö / R.TEMP: "),
            ("ansiwhite", f"{reactor_temp:8.0f} –ö"),
            ("class:panel", "             ‚îÇ\\n"),
            
            ("class:panel", "‚îÇ "),
            ("class:label", "üí® –ö–ò–°–õ–û–†–û–î / OXYGEN : "),
            ("ansigreen" if oxygen > 18 else "ansired", f"{oxygen:8.1f} %"),
            ("class:panel", "             ‚îÇ\\n"),
            ("class:panel_title", "‚îî" + "‚îÄ" * 48 + "‚îò\\n\\n"),
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            ("class:panel_title", f"‚îå‚îÄ {nav_title} " + "‚îÄ" * 25 + "‚îê\\n"),
            ("class:panel", f"‚îÇ {coords_label}:\\n"),
            ("class:panel", f"‚îÇ ‚îú‚îÄ X: {nav_x:+12.2f} km\\n"),
            ("class:panel", f"‚îÇ ‚îú‚îÄ Y: {nav_y:+12.2f} km\\n"),
            ("class:panel", f"‚îÇ ‚îú‚îÄ Z: {nav_z:+12.2f} km\\n"),
            ("class:panel", f"‚îÇ ‚îÇ\\n"),
            ("class:panel", f"‚îÇ {velocity_label}:\\n"),
            ("class:panel", f"‚îÇ ‚îú‚îÄ –ê–±—Å–æ–ª—é—Ç–Ω–∞—è: {vel_abs:4.0f} –º/—Å\\n"),
            ("class:panel", f"‚îÇ ‚îú‚îÄ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è: {vel_rel:+3.0f} –º/—Å\\n"),
            ("class:panel", f"‚îÇ ‚ï∞‚îÄ –î–æ —Ü–µ–ª–∏: {anomaly_dist:6.2f} –∫–º\\n"),
            ("class:panel_title", "‚îî" + "‚îÄ" * 48 + "‚îò\\n\\n"),
            
            # –ú–∏—Å—Å–∏—è
            ("class:panel_title", f"‚îå‚îÄ {mission_title} " + "‚îÄ" * 30 + "‚îê\\n"),
            ("class:panel", f"‚îÇ ID: {self.mission_data['designator']}\\n"),
            ("class:panel", f"‚îÇ {progress_label}: [{self._format_bar(progress)}] {progress:4.1f}%\\n"),
            ("class:panel", f"‚îÇ {etc_label}\\n"),
            ("class:panel", f"‚îÇ –≠—Ç–∞–ø—ã: {sum(1 for s in self.mission_data['steps'] if s['done'])}/{len(self.mission_data['steps'])} –∑–∞–≤–µ—Ä—à–µ–Ω–æ\\n"),
            ("class:panel_title", "‚îî" + "‚îÄ" * 48 + "‚îò"),
        ])
        
        return Window(FormattedTextControl(content_text), height=30)
    
    def _create_log_window(self) -> Window:
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π."""
        if self.language == "RU":
            title = "–ñ–£–†–ù–ê–õ –°–û–ë–´–¢–ò–ô / EVENT LOG"
        else:
            title = "EVENT LOG / –ñ–£–†–ù–ê–õ –°–û–ë–´–¢–ò–ô"
        
        log_text = FormattedText([
            ("class:panel_title", f"‚îå‚îÄ {title} " + "‚îÄ" * 15 + "‚îê\\n")
        ])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–æ–±—ã—Ç–∏–π
        recent_events = self.event_log[-8:] if len(self.event_log) >= 8 else self.event_log
        
        for event in recent_events:
            message = event['message']
            if len(message) > 44:
                message = message[:41] + "..."
            log_text.append(("class:panel", f"‚îÇ [{event['time']}] {event['system'][:12]}: {message}\\n"))
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        for _ in range(8 - len(recent_events)):
            log_text.append(("class:panel", "‚îÇ" + " " * 48 + "\\n"))
        
        log_text.append(("class:panel_title", "‚îî" + "‚îÄ" * 48 + "‚îò"))
        
        return Window(FormattedTextControl(log_text), height=11)
    
    def _process_command(self, command: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É."""
        if not command.strip():
            return
            
        cmd_parts = command.lower().split()
        cmd = cmd_parts[0]
        
        self.log("–û–ü–ï–†–ê–¢–û–† / OPERATOR", f"üí¨ –ö–æ–º–∞–Ω–¥–∞: {command}")
        
        try:
            if cmd == "thrust":
                if len(cmd_parts) >= 2:
                    thrust_pct = float(cmd_parts[1])
                    if 0 <= thrust_pct <= 100:
                        success = self.actuator_controller.set_main_drive_thrust(thrust_pct)
                        if success:
                            self.log("–î–í–ò–ì–ê–¢–ï–õ–ò / PROPULSION", f"üöÄ –ì–ª–∞–≤–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å: {thrust_pct}%")
                    else:
                        self.log("–û–®–ò–ë–ö–ê / ERROR", "‚ùå –¢—è–≥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0-100%")
                else:
                    self.log("–û–®–ò–ë–ö–ê / ERROR", "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: thrust <0-100>")
            
            elif cmd == "autopilot":
                self.autopilot_enabled = not getattr(self, 'autopilot_enabled', False)
                status = "–í–ö–õ–Æ–ß–ï–ù / ENABLED" if self.autopilot_enabled else "–í–´–ö–õ–Æ–ß–ï–ù / DISABLED"
                self.log("–ê–í–¢–û–ü–ò–õ–û–¢ / AUTOPILOT", f"ü§ñ –ê–≤—Ç–æ–ø–∏–ª–æ—Ç {status}")
            
            elif cmd in ["lang", "language", "—è–∑—ã–∫"]:
                self.language = "EN" if self.language == "RU" else "RU"
                lang_name = "–†—É—Å—Å–∫–∏–π" if self.language == "RU" else "English"
                self.log("–ò–ù–¢–ï–†–§–ï–ô–° / INTERFACE", f"üåê –Ø–∑—ã–∫: {lang_name}")
            
            elif cmd == "emergency":
                success = self.actuator_controller.emergency_stop()
                if success:
                    self.log("–ê–í–ê–†–ò–ô–ù. / EMERGENCY", "üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê")
                else:
                    self.log("–û–®–ò–ë–ö–ê / ERROR", "‚ùå –û—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            elif cmd == "status":
                summary = self.logic_controller.get_ship_status_summary()
                self.log("–°–¢–ê–¢–£–° / STATUS", f"üõ∞Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {summary.get('current_state')}")
                self.log("–°–¢–ê–¢–£–° / STATUS", f"üîß –°–∏—Å—Ç–µ–º—ã: {summary.get('overall_status')}")
            
            else:
                self.log("–û–®–ò–ë–ö–ê / ERROR", f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '{cmd}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ: thrust, autopilot, lang, emergency, status")
                
        except ValueError:
            self.log("–û–®–ò–ë–ö–ê / ERROR", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä")
        except Exception as e:
            self.log("–û–®–ò–ë–ö–ê / ERROR", f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")

    def _create_command_window(self) -> TextArea:
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥."""
        if self.language == "RU":
            prompt = "–ö–û–ú–ê–ù–î–ê> "
        else:
            prompt = "COMMAND> "
        
        command_area = TextArea(
            prompt=prompt,
            multiline=False,
            wrap_lines=False,
            height=3,
            scrollbar=False
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        def accept_handler(buffer):
            command = buffer.text
            buffer.reset()
            self._process_command(command)
        
        command_area.buffer.accept_handler = accept_handler
        return command_area
    
    def _create_layout(self) -> Layout:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π layout –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = self._create_header_window()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_content = self._create_main_content_window()
        
        # –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
        log_panel = self._create_log_window()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        main_panel = HSplit([
            VSplit([
                main_content,
                Window(width=2),  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                log_panel,
            ]),
        ])
        
        # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        command_input = Frame(
            self._create_command_window(),
            title="–ö–û–ú–ê–ù–î–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° / COMMAND INTERFACE"
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π layout
        return Layout(HSplit([
            header,
            Window(height=1),
            main_panel,
            Window(height=1),
            command_input,
        ]))
    
    def _create_keybindings(self) -> KeyBindings:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∞–≤–∏—à."""
        kb = KeyBindings()
        
        @kb.add('c-c')
        def exit_app(event):
            self.running = False
            self.log("–°–ò–°–¢–ï–ú–ê / SYSTEM", "üë®‚ÄçüöÄ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã / Shutting down")
            event.app.exit()
        
        @kb.add('f12')
        def toggle_language(event):
            self.language = "EN" if self.language == "RU" else "RU"
            lang_name = "–†—É—Å—Å–∫–∏–π" if self.language == "RU" else "English"
            self.log("–ò–ù–¢–ï–†–§–ï–ô–° / UI", f"üåê –Ø–∑—ã–∫: {lang_name} / Language: {lang_name}")
        
        @kb.add('f1')
        def toggle_autopilot(event):
            self.autopilot_enabled = not getattr(self, 'autopilot_enabled', False)
            status = "–í–ö–õ–Æ–ß–ï–ù / ENABLED" if self.autopilot_enabled else "–í–´–ö–õ–Æ–ß–ï–ù / DISABLED"
            self.log("–ê–í–¢–û–ü–ò–õ–û–¢ / AUTOPILOT", f"ü§ñ {status}")
        
        @kb.add('f2')
        def emergency_stop(event):
            success = self.actuator_controller.emergency_stop()
            if success:
                self.log("–ê–í–ê–†–ò–ô–ù. / EMERGENCY", "üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê / EMERGENCY STOP")
            else:
                self.log("–ê–í–ê–†–ò–ô–ù. / EMERGENCY", "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ / Stop failed")
        
        return kb
    
    def _create_style(self) -> Style:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        return Style.from_dict({
            'header': 'ansiwhite bg:ansiblue',
            'title': 'ansiwhite bg:ansiblue bold',
            'spacecraft': 'ansiyellow bg:ansiblue bold', 
            'mission_time': 'ansigreen bg:ansiblue bold',
            'time': 'ansiwhite bg:ansiblue',
            'lang': 'ansicyan bg:ansiblue',
            'panel': 'ansiwhite bg:ansiblack',
            'panel_title': 'ansiwhite bg:ansiblue bold',
            'label': 'ansicyan',
            'text-area': 'ansiwhite bg:ansiblack',
            'text-area.prompt': 'ansigreen bg:ansiblack bold',
        })
    
    async def run_async(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        if not PROMPT_TOOLKIT_AVAILABLE:
            print("‚ùå prompt_toolkit not available, falling back to simple mode")
            return self.run_simple_mode()
        
        try:
            app = Application(
                layout=self._create_layout(),
                key_bindings=self._create_keybindings(),
                style=self._create_style(),
                full_screen=True,
                refresh_interval=1.0,  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            )
            
            await app.run_async()
            
        except Exception as e:
            self.log("–°–ò–°–¢–ï–ú–ê / SYSTEM", f"‚ùå prompt_toolkit error: {e}")
            print(f"‚ùå prompt_toolkit failed: {e}")
            print("üîÑ Falling back to simple terminal mode...")
            return self.run_simple_mode()
        finally:
            self.running = False
    
    def run_simple_mode(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º –±–µ–∑ prompt_toolkit."""
        print("üöÄ Running in Simple Terminal Mode")
        print("   This fallback mode works without prompt_toolkit")
        print("   Type 'exit' to quit, 'help' for commands")
        
        try:
            while self.running:
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                hull = self.ship_core.get_hull_status()
                power = self.ship_core.get_power_status()
                mission_time = self._get_mission_time()
                
                print(f"\\nüõ∞Ô∏è {self.ship_core.get_id()} | {mission_time}")
                print(f"üõ°Ô∏è Hull: {hull.integrity:.1f}% | ‚ö° Power: {power.reactor_output_mw:.1f}MW")
                print(f"üéØ Mission: {self.mission_data['progress']:.1f}% | üì° Distance: {self.live_telemetry.get('anomaly_distance', 32.17):.2f}km")
                
                # –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
                try:
                    command = input("\\nüöÄ COMMAND> ").strip()
                    if command.lower() in ['exit', 'quit']:
                        break
                    elif command.lower() == 'help':
                        print("Commands: exit, lang, status, autopilot, thrust <0-100>")
                    elif command.lower() == 'lang':
                        self.language = "EN" if self.language == "RU" else "RU"
                        print(f"Language: {'English' if self.language == 'EN' else '–†—É—Å—Å–∫–∏–π'}")
                    elif command.lower() == 'status':
                        print(f"Ship State: {self.logic_controller.current_state.value}")
                    else:
                        print(f"Command received: {command}")
                        
                except EOFError:
                    break
                except KeyboardInterrupt:
                    break
                    
        except Exception as e:
            print(f"‚ùå Simple mode error: {e}")
        finally:
            self.running = False
            print("\\nüë®‚ÄçüöÄ QIKI Mission Control Ultimate terminated.")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Mission Control Ultimate."""
        print("üöÄ –ó–∞–ø—É—Å–∫ QIKI Mission Control Ultimate...")
        print("   F1=–ê–≤—Ç–æ–ø–∏–ª–æ—Ç/Autopilot | F2=–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞/Emergency | F12=–Ø–∑—ã–∫/Language")
        print("   Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞ / Ctrl+C to exit")
        print()
        
        if PROMPT_TOOLKIT_AVAILABLE:
            print("‚úÖ Using advanced prompt_toolkit interface")
        else:
            print("‚ö†Ô∏è Using simple fallback interface")
        
        try:
            if PROMPT_TOOLKIT_AVAILABLE:
                asyncio.run(self.run_async())
            else:
                self.run_simple_mode()
        except KeyboardInterrupt:
            pass
        finally:
            self.running = False
            print("\\nüë®‚ÄçüöÄ QIKI Mission Control Ultimate –∑–∞–≤–µ—Ä—à–µ–Ω / terminated")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        terminal = QIKIMissionControlUltimate()
        terminal.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ / Startup failed: {e}")
        import traceback
        traceback.print_exc()